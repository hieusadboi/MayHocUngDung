import tkinter as tk
from tkinter import messagebox, Toplevel, ttk
from PIL import Image, ImageTk
import joblib
import os

# === H√†m d·ª± ƒëo√°n v·ªõi c·∫£ 3 m√¥ h√¨nh ===
def predict_phishing():
    try:
        # L·∫•y gi√° tr·ªã t·ª´ c√°c combobox
        features = [int(combobox.get().split("(")[1].strip(")").strip()) for combobox in comboboxes]

        # Load 3 m√¥ h√¨nh ƒë√£ l∆∞u
        dt_model = joblib.load("decision_tree_model.pkl")
        knn_model = joblib.load("knn_model.pkl")
        nb_model = joblib.load("naive_bayes_model.pkl")

        # D·ª± ƒëo√°n v·ªõi t·ª´ng m√¥ h√¨nh
        prediction_dt = dt_model.predict([features])[0]
        prediction_knn = knn_model.predict([features])[0]
        prediction_nb = nb_model.predict([features])[0]

        # T·∫°o th√¥ng b√°o k·∫øt qu·∫£
        result_message = "üîç K·∫øt qu·∫£ d·ª± ƒëo√°n:\n\n"
        result_message += f"üìå KNN:{'KH√îNG L·ª™A ƒê·∫¢O ‚úÖ' if prediction_knn == 1 else 'L·ª™A ƒê·∫¢O ‚ö†Ô∏è'}\n\n"
        result_message += f"üå≥ C√¢y quy·∫øt ƒë·ªãnh: {'KH√îNG L·ª™A ƒê·∫¢O ‚úÖ' if prediction_dt == 1 else 'L·ª™A ƒê·∫¢O ‚ö†Ô∏è'}\n\n"
        result_message += f"üß† Naive Bayes: {'KH√îNG L·ª™A ƒê·∫¢O ‚úÖ' if prediction_nb == 1 else 'L·ª™A ƒê·∫¢O ‚ö†Ô∏è'}"

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        messagebox.showinfo("K·∫øt qu·∫£ d·ª± ƒëo√°n", result_message)

    except Exception as e:
        messagebox.showerror("L·ªói", str(e))

# === H√†m hi·ªÉn th·ªã ma tr·∫≠n nh·∫ßm l·∫´n ===
def show_confusion_matrix(model_name):
    try:
        filename = f"confusion_matrix_{model_name}.png"
        if not os.path.exists(filename):
            messagebox.showerror("L·ªói", f"Kh√¥ng t√¨m th·∫•y file {filename}!")
            return

        new_window = Toplevel(root)
        new_window.title(f"Ma tr·∫≠n nh·∫ßm l·∫´n ({model_name.upper()})")

        img = Image.open(filename)
        img = img.resize((1400, 933), Image.Resampling.LANCZOS)
        img = ImageTk.PhotoImage(img)

        panel = tk.Label(new_window, image=img)
        panel.image = img
        panel.pack()

    except Exception as e:
        messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ m·ªü ·∫£nh: {e}")

# === Giao di·ªán Tkinter ===
root = tk.Tk()
root.title("D·ª± ƒëo√°n trang web l·ª´a ƒë·∫£o")

# Danh s√°ch c√°c c√¢u h·ªèi v√† gi√° tr·ªã
features_list = [
    ("URL ch·ª©a ƒë·ªãa ch·ªâ IP?", ["Kh√¥ng (1)", "C√≥ (-1)"]),
    ("ƒê·ªô d√†i URL?", ["Ng·∫Øn (1)", "Trung b√¨nh (0)", "D√†i (-1)"]),
    ("D√πng d·ªãch v·ª• r√∫t g·ªçn URL?", ["Kh√¥ng (1)", "C√≥ (-1)"]),
    ("URL c√≥ k√Ω t·ª± @?", ["Kh√¥ng (1)", "C√≥ (-1)"]),
    ("C√≥ // b·∫•t th∆∞·ªùng?", ["Kh√¥ng (1)", "C√≥ (-1)"]),
    ("T√™n mi·ªÅn c√≥ d·∫•u -?", ["Kh√¥ng (1)", "C√≥ (-1)"]),
    ("S·ªë subdomain?", ["√çt (1)", "Trung b√¨nh (0)", "Nhi·ªÅu (-1)"]),
    ("Tr·∫°ng th√°i SSL?", ["H·ª£p l·ªá (1)", "Kh√¥ng r√µ (0)", "Kh√¥ng h·ª£p l·ªá (-1)"]),
    ("Th·ªùi gian ƒëƒÉng k√Ω?", ["D√†i (1)", "Ng·∫Øn (-1)"]),
    ("Ngu·ªìn favicon?", ["C√πng mi·ªÅn (1)", "Kh√°c (-1)"]),
    ("C·ªïng k·∫øt n·ªëi?", ["Chu·∫©n (1)", "B·∫•t th∆∞·ªùng (-1)"]),
    ("T√™n mi·ªÅn c√≥ 'https'?", ["Kh√¥ng (1)", "C√≥ (-1)"]),
    ("Ngu·ªìn n·ªôi dung?", ["C√πng mi·ªÅn (1)", "Kh√°c (-1)"]),
    ("C√°c li√™n k·∫øt trong trang tr·ªè ƒë·∫øn?", ["C√πng trang (1)", "M·ªôt s·ªë kh√°c (0)", "Nhi·ªÅu trang kh√°c (-1)"]),
    ("Th·∫ª script/link?", ["C√πng trang (1)", "M·ªôt s·ªë kh√°c (0)", "Nhi·ªÅu kh√°c (-1)"]),
    ("X·ª≠ l√Ω form?", ["C√πng mi·ªÅn (1)", "Kh√¥ng r√µ (0)", "Kh√°c (-1)"]),
    ("G·ª≠i th·∫≥ng email?", ["Kh√¥ng (1)", "C√≥ (-1)"]),
    ("URL kh·ªõp t√™n mi·ªÅn?", ["C√≥ (1)", "Kh√¥ng (-1)"]),
    ("S·ªë chuy·ªÉn h∆∞·ªõng?", ["Nhi·ªÅu (1)", "√çt (0)"]),
    ("Thay ƒë·ªïi khi hover?", ["Kh√¥ng (1)", "C√≥ (-1)"]),
    ("Cho ph√©p chu·ªôt ph·∫£i?", ["C√≥ (1)", "Kh√¥ng (-1)"]),
    ("C·ª≠a s·ªï popup?", ["Kh√¥ng (1)", "C√≥ (-1)"]),
    ("D√πng iframe ·∫©n?", ["Kh√¥ng (1)", "C√≥ (-1)"]),
    ("Tu·ªïi t√™n mi·ªÅn?", ["C≈© (1)", "M·ªõi (-1)"]),
    ("DNS h·ª£p l·ªá?", ["C√≥ (1)", "Kh√¥ng (-1)"]),
    ("L∆∞u l∆∞·ª£ng truy c·∫≠p?", ["Cao (1)", "Trung b√¨nh (0)", "Th·∫•p (-1)"]),
    ("PageRank?", ["Cao (1)", "Th·∫•p (-1)"]),
    ("Google Index?", ["C√≥ (1)", "Kh√¥ng (-1)"]),
    ("C√°c trang web kh√°c li√™n k·∫øt tr·ªè ƒë·∫øn trang n√†y?", ["Nhi·ªÅu (1)", "M·ªôt s·ªë (0)", "√çt (-1)"]),
    ("Trong danh s√°ch phishing?", ["Kh√¥ng (1)", "C√≥ (-1)"])
]

comboboxes = []

# T·∫°o frame ch·ª©a n·ªôi dung ch√≠nh v·ªõi thanh cu·ªôn
canvas = tk.Canvas(root)
scrollbar = ttk.Scrollbar(root, orient="vertical", command=canvas.yview)
scrollable_frame = ttk.Frame(canvas)

scrollable_frame.bind(
    "<Configure>",
    lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
)

canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
canvas.configure(yscrollcommand=scrollbar.set)

# S·∫Øp x·∫øp c√°c c√¢u h·ªèi th√†nh 2 c·ªôt
for i in range(0, len(features_list), 2):
    row = i // 2
    
    # C·ªôt tr√°i
    question_left, options_left = features_list[i]
    lbl_left = ttk.Label(scrollable_frame, text=question_left)
    lbl_left.grid(row=row, column=0, padx=20, pady=5, sticky="w")
    
    combo_left = ttk.Combobox(scrollable_frame, values=options_left, state="readonly", width=25)
    combo_left.grid(row=row, column=1, padx=20, pady=5, sticky="w")
    comboboxes.append(combo_left)
    
    # C·ªôt ph·∫£i (n·∫øu c√≥)
    if i + 1 < len(features_list):
        question_right, options_right = features_list[i + 1]
        lbl_right = ttk.Label(scrollable_frame, text=question_right)
        lbl_right.grid(row=row, column=3, padx=20, pady=5, sticky="w")
        
        combo_right = ttk.Combobox(scrollable_frame, values=options_right, state="readonly", width=25)
        combo_right.grid(row=row, column=4, padx=20, pady=5, sticky="w")
        comboboxes.append(combo_right)

# Th√™m kho·∫£ng tr·ªëng gi·ªØa 2 c·ªôt
scrollable_frame.grid_columnconfigure(2, minsize=50) 

# ƒê·∫∑t canvas v√† scrollbar
canvas.pack(side="left", fill="both", expand=True)
scrollbar.pack(side="right", fill="y")

# === Ph·∫ßn n√∫t ch·ª©c nƒÉng ===
button_frame = ttk.Frame(root)

# T·∫°o c√°c n√∫t
predict_btn = ttk.Button(button_frame, text="üöÄ D·ª± ƒëo√°n", command=predict_phishing)
cm_dt_btn = ttk.Button(button_frame, text="üìä Ma tr·∫≠n nh·∫ßm l·∫´n c√¢y quy·∫øt ƒë·ªãnh", 
                      command=lambda: show_confusion_matrix("decision_tree"))
cm_knn_btn = ttk.Button(button_frame, text="üìä Ma tr·∫≠n nh·∫ßm l·∫´n knn", 
                       command=lambda: show_confusion_matrix("knn"))
cm_nb_btn = ttk.Button(button_frame, text="üìä Ma tr·∫≠n nh·∫ßm l·∫´n naive bayes", 
                      command=lambda: show_confusion_matrix("naive_bayes"))

# S·∫Øp x·∫øp layout s·ª≠ d·ª•ng grid
predict_btn.grid(row=0, column=0, padx=10, pady=5, sticky="ew")
cm_dt_btn.grid(row=1, column=0, padx=10, pady=5, sticky="ew")
cm_knn_btn.grid(row=2, column=0, padx=10, pady=5, sticky="ew")
cm_nb_btn.grid(row=3, column=0, padx=10, pady=5, sticky="ew")

# ƒê·∫£m b·∫£o c√°c c·ªôt c√≥ c√πng chi·ªÅu r·ªông
button_frame.grid_columnconfigure(0, weight=1)

# ƒê·∫∑t button_frame v√†o c·ª≠a s·ªï ch√≠nh
button_frame.pack(fill="x", pady=20)

root.mainloop()
